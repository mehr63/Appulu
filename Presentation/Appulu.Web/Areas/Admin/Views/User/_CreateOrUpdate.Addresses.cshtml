@model UserModel

<div class="panel-group">
    @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.UserDetailsAddressesTop, additionalData = Model })
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="user-addresses-grid"></div>

            <script>
                $(document).ready(function () {
                    $("#user-addresses-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("AddressesSelect", "User"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: function() {
                                        var data = {
                                            UserId: '@(Model.Id)'
                                        };
                                        addAntiForgeryToken(data);
                                        return data;
                                    }
                                },
                                destroy: {
                                    url: "@Html.Raw(Url.Action("AddressDelete", "User", new { userId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id"
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(Model.UserAddressSearchModel.PageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(Model.UserAddressSearchModel.AvailablePageSizes)],
                            @await Html.PartialAsync("_GridPagerMessages")
                        },
                        editable: {
                            confirmation: "@T("Admin.Common.DeleteConfirmation")",
                            mode: "inline"
                        },
                        scrollable: false,
                        columns: [{
                            field: "FirstName",
                            title: "@T("Admin.Address.Fields.FirstName")"
                        }, {
                            field: "LastName",
                            title: "@T("Admin.Address.Fields.LastName")"
                        }, {
                            field: "Email",
                            title: "@T("Admin.Address.Fields.Email")"
                        }, {
                            field: "PhoneNumber",
                            title: "@T("Admin.Address.Fields.PhoneNumber")"
                        }, {
                            field: "FaxNumber",
                            title: "@T("Admin.Address.Fields.FaxNumber")"
                        }, {
                            field: "AddressHtml",
                            title: "@T("Admin.Address")",
                            encoded: false
                        }, {
                            field: "Id",
                            title: "@T("Admin.Common.Edit")",
                            width: 100,
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: '<a class="btn btn-default" href="@Url.Content("~/Admin/User/AddressEdit?userId=")@Model.Id&addressid=#=Id#"><i class="fa fa-pencil"></i>@T("Admin.Common.Edit")</a>'
                        }, {
                            command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                            title: "@T("Admin.Common.Delete")",
                            width: 100,
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" }
                        }]
                    });
                });
            </script>
        </div>
        <div class="panel-footer">
            <button type="button" class="btn btn-primary" onclick="location.href = '@Url.Action("AddressCreate", new { userId = Model.Id })'">
                @T("Admin.Users.Users.Addresses.AddButton")
            </button>
        </div>
    </div>
    @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.UserDetailsAddressesBottom, additionalData = Model })
</div>